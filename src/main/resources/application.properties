spring.application.name=BillionCart

# developed by lalit pal
# This property specifies the port number on which the embedded web server will listen for incoming HTTP requests, allowing to customize the port used by application.
server.port=9090

#jsp properties
#spring.mvc.view.prefix=/WEB-INF/jsp/
#spring.mvc.view.suffix=.jsp

# Database connection properties
spring.datasource.url=jdbc:mysql://localhost:3306/oneonedbs?createDatabaseIfNotExist=true
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=root


# Hibernate properties
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect

#This property configures Hibernate to print the SQL queries it generates. It's useful during development and debugging, as it makes the SQL statements more readable by adding line breaks and indentation. However, it's recommended to turn it off in production environments due to the performance overhead of formatting large SQL queries.
#spring.jpa.properties.hibernate.format_sql=true

#Hibernate will automatically update the database schema based on the entity mappings when the application starts. It will create tables that don't exist, modify existing tables to match the entity mappings, and keep the data intact. This mode is convenient during development and testing phases, but it's not recommended for production as it can lead to unexpected schema changes and data loss.
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.ddl-auto=validate
# create-drop

#This property instructs Hibernate to log the SQL statements it executes. It helps developers to understand what SQL queries are being generated by Hibernate based on JPQL (Java Persistence Query Language). It's beneficial for debugging and performance tuning during development. It should be disabled in production environments to avoid logging sensitive information and to improve performance.
#spring.jpa.show-sql=true

# @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "users_id_seq")
#    @SequenceGenerator(name = "users_id_seq", sequenceName = "users_id_seq", initialValue = 4, allocationSize = 1)

#amazonS3
#cloud.aws.credentials.access-key=${AWS_ACCESS_KEY_ID}
#cloud.aws.credentials.secret-key=${AWS_SECRET_ACCESS_KEY}
#cloud.aws.region.static=your-region

